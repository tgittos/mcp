<rule>
name: typescript-style
scope:
  - "**/*.ts"
description: |
  Enforces consistent and idiomatic Typescript style and formatting across all Typescript files.
recommendations:
  - Use 2 spaces for indentation. Never use tabs.
  - Prefer single quotes for strings, except when escaping would be harder with single quotes.
  - Always use semicolons to terminate statements.
  - Place opening braces on the same line as the declaration (K&R style).
  - Limit lines to 100 characters for readability.
  - Use camelCase for variables, functions, and properties. Use PascalCase for types, interfaces, and classes.
  - Prefer const over let, and let over var. Never use var.
  - Use trailing commas in multi-line object and array literals.
  - Prefer arrow functions for anonymous functions and callbacks.
  - Do not use unused variables or imports; remove them.
  - Prefer template literals over string concatenation.
  - Use explicit return types for functions and methods, except for trivial arrow functions.
  - Prefer destructuring for objects and arrays when accessing multiple properties.
  - Avoid magic numbers; use named constants instead.
  - Use nullish coalescing (??) and optional chaining (?.) where appropriate.
rationale: |
  Consistent style improves code readability, maintainability, and reduces cognitive load for teams. Idiomatic Typescript leverages language features for safer, more expressive code.
examples:
  - input: |
      let foo = "bar"
      function doThing() {
      console.log(foo)
      }
    output: |
      const foo = 'bar';
      function doThing(): void {
        console.log(foo);
      }
</rule>
description:
globs:
alwaysApply: false
---
