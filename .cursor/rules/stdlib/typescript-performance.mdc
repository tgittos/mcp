<rule>
name: typescript-performance
scope:
  - "**/*.ts"
description: |
  Documents best practices for writing performant Typescript code, including efficient data structures, avoiding unnecessary computation, and leveraging Typescript features for performance.
recommendations:
  - Choose the most appropriate data structure for the task (e.g., Map, Set, Array).
  - Avoid unnecessary object and array cloning; use spread/rest judiciously.
  - Minimize use of deeply nested objects and large object graphs.
  - Use lazy evaluation and memoization for expensive computations.
  - Avoid creating functions inside loops.
  - Prefer for-of and array methods (map, filter, reduce) over forEach for better performance and readability.
  - Use Typescript's readonly and const to enable better optimization.
  - Profile and benchmark critical code paths.
  - Avoid memory leaks by cleaning up event listeners and intervals.
  - Use async/await for non-blocking I/O and avoid blocking the event loop.
rationale: |
  Writing efficient Typescript code ensures applications are fast, responsive, and scalable. Leveraging Typescript's features can help the compiler and runtime optimize code.
examples:
  - input: |
      const arr = [1,2,3,4,5];
      const doubled = [];
      for (let i = 0; i < arr.length; i++) {
        doubled.push(arr[i] * 2);
      }
    output: |
      const arr = [1,2,3,4,5];
      const doubled = arr.map(x => x * 2);
</rule>
description:
globs:
alwaysApply: false
---
