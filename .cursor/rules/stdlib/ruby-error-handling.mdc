<rule>
name: ruby-error-handling
scope: '*.rb'
description: |
  Recommend best practices for handling errors and exceptions in Ruby code, including the use of rescue, custom exceptions, and error propagation.

recommendations:
  - Use `begin ... rescue ... end` blocks to handle exceptions only where necessary.
  - Rescue only the specific exceptions you expect, not `StandardError` or `Exception` unless unavoidable.
  - Avoid rescuing exceptions without handling or logging them.
  - Use custom exception classes for domain-specific errors.
  - Always log or report errors before swallowing them.
  - Use `ensure` for cleanup code that must run regardless of errors.
  - Avoid using exceptions for control flow.

examples:
  - input: |
      begin
        do_something
      rescue MyCustomError => e
        logger.error(e.message)
      end
    output: "Correct error handling: specific exception rescued and logged."
  - input: |
      begin
        do_something
      rescue
      end
    output: "Incorrect error handling: exception rescued without handling or logging."

metadata:
  priority: high
  version: 1.0
</rule>
description:
globs:
alwaysApply: false
---

## Error Handling Best Practices

- Define and use custom error classes for domain-specific errors.
- Never rescue `Exception` or `StandardError` without a specific reason; rescue only the errors you expect.
- Always log errors with sufficient context for debugging.
- Avoid silent failures; errors should be visible in logs or monitoring systems.

## Error Reporting and Monitoring

- Integrate error reporting and monitoring tools (e.g., Sentry, Rollbar) to track and alert on production errors.
- Ensure all critical errors are reported and actionable.
