<rule>
name: ruby-oop
scope: '*.rb'
description: |
  Recommend best practices for object-oriented programming in Ruby, including class design, inheritance, and encapsulation.

recommendations:
  - Favor composition over inheritance where possible.
  - Use modules for mixins and shared behavior.
  - Keep classes focused and small (single responsibility principle).
  - Encapsulate internal state using private/protected methods.
  - Use `attr_reader`, `attr_writer`, and `attr_accessor` appropriately.
  - Avoid global variables; use instance or class variables instead.
  - Document class responsibilities and public APIs.

examples:
  - input: |
      class User
        attr_reader :name
        def initialize(name)
          @name = name
        end
      end
    output: "Correct encapsulation and use of attr_reader."
  - input: |
      class User
        def initialize(name)
          $name = name
        end
      end
    output: "Incorrect: avoid global variables."

metadata:
  priority: medium
  version: 1.0
</rule>
description:
globs:
alwaysApply: false
---
