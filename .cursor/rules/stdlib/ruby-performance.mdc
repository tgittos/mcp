<rule>
name: ruby-performance
scope: '*.rb'
description: |
  Recommend best practices for writing efficient Ruby code, including memory usage, algorithmic efficiency, and avoiding common performance pitfalls.

recommendations:
  - Prefer built-in methods and libraries for common tasks (e.g., `map`, `select`, `inject`).
  - Avoid creating unnecessary objects inside loops.
  - Use symbols instead of strings for identifiers and hash keys when possible.
  - Avoid monkey-patching core classes unless absolutely necessary.
  - Profile and benchmark code to identify bottlenecks.
  - Use lazy enumerators for large or potentially infinite collections.
  - Avoid N+1 query problems when working with databases (e.g., ActiveRecord).

examples:
  - input: |
      users.map { |u| u.name }
    output: "Efficient use of map."
  - input: |
      result = []
      for i in 0..1000
        result << i.to_s
      end
    output: "Consider using map for better performance and readability."

metadata:
  priority: medium
  version: 1.0
</rule>
description:
globs:
alwaysApply: false
---
