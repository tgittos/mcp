<rule>
name: typescript-testing
scope:
  - "**/*.ts"
description: |
  Documents best practices for testing Typescript code, including unit testing, test structure, and use of types in tests.
recommendations:
  - Write unit tests for all public functions, classes, and modules.
  - Use descriptive test names and group related tests with describe blocks.
  - Prefer test frameworks with Typescript support (e.g., Jest, Vitest, Mocha with ts-node).
  - Use type-safe test data and avoid using 'any' in tests.
  - Mock dependencies using types or interfaces where possible.
  - Test both positive and negative cases, including edge cases.
  - Keep tests isolated and independent from each other.
  - Place test files alongside source files or in a dedicated __tests__ directory.
  - Use code coverage tools to ensure all branches are tested.
rationale: |
  Comprehensive, type-safe tests catch bugs early and ensure code quality. Using Typescript in tests leverages type safety for test code as well.
examples:
  - input: |
      // No tests for add function
      function add(a: number, b: number): number {
        return a + b;
      }
    output: |
      // add.test.ts
      import { add } from './add';
      describe('add', () => {
        it('adds two numbers', () => {
          expect(add(1, 2)).toBe(3);
        });
      });
</rule>
description:
globs:
alwaysApply: false
---
